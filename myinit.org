* Library Load
#+BEGIN_SRC emacs-lisp
  (load-library "url-handlers")

  (setq package-archives
        '(("gnu" . "http://elpa.gnu.org/packages/")
          ("melpa" . "http://melpa.org/packages/")))

  (setq gc-cons-threshold 100000000) ;; 100mb, default: 800kb
#+END_SRC
* Ensure Packages
** Repositories
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (add-to-list 'package-archives
               '("gnu" . "http://elpa.gnu.org/packages/"))
  (add-to-list 'package-archives
               '("melpa" . "http://melpa.org/packages/"))

#+END_SRC
** Package List
#+BEGIN_SRC emacs-lisp
  (setq package-list
        '(cider
	      cl
          dash
          elpy
          org-ref
          rainbow-mode
          scala-mode
          slime
          which-key))
#+END_SRC
** Install Missing
#+BEGIN_SRC emacs-lisp
  ;; activate the packages
  (package-initialize)

  ;; fetch the list of packages available
  (unless package-archive-contents
    (package-refresh-contents))

  (mapc #'(lambda (package)
            (unless (package-installed-p package)
              (package-install package)))
        package-list)

  ;; (if (not (package-installed-p 'use-package))
  ;;     (package-install 'use-package))
  ;; (require 'use-package)

  ;; install the missing packages
  (dolist (package package-list)
    :ensure package)
#+END_SRC
** Set Requirements
#+BEGIN_SRC emacs-lisp
  (require 'cl)
  (require 'dash)
  (require 'org-ref)
#+END_SRC
* Org-mode Settings
#+BEGIN_SRC emacs-lisp
  (load-file (concat user-emacs-directory "home-directory.el"))
  (setq org-directory (concat home-directory "/Dropbox/Org/"))

  (setq org-log-done t)

  (setq org-use-fast-todo-selection t)
  (setq org-treat-S-cursor-todo-selection-as-state-change nil)
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)"))))
  (setq org-todo-keyword-faces
        (quote (("TODO" :foreground "gold" :weight bold)
                ("NEXT" :foreground "gold" :weight bold)
                ("DONE" :foreground "forest green" :weight bold)
                ("WAITING" :foreground "orange" :weight bold)
                ("HOLD" :foreground "orange" :weight bold)
                ("CANCELLED" :foreground "forest green" :weight bold))))

  (setq org-default-notes-file (concat (expand-file-name org-directory) "Home.org"))

  (setq org-capture-templates
        '(("e" "Event" entry (file+headline org-default-notes-file "Events")
           #'org-capture-event)
          ("m" "Meeting" entry (file+headesline org-default-notes-file "Meetings")
           #'org-capture-meeting)
          ("n" "Note" entry (file+headline org-default-notes-file "Notes")
           #'org-capture-note)
          ("e" "Exercise" entry (file org-default-notes-file))
          ("p" "Phone Call" entry (file+headline org-default-notes-file "Calls")
           #'org-capture-phone)
          ("g" "Groceries" entry (file+headline org-default-notes-file "Groceries")
           #'org-capture-grocery)
          ("r" "Recipe" entry (file+headline org-default-notes-file "Recipes")
           #'org-capture-recipe)))

  (load-library "find-lisp")
  (setq org-agenda-files
        (find-lisp-find-files org-directory "\.org$"))

  ;; setup org-ref
  (setq org-ref-bibliography-notes (concat org-directory "bibliography/notes.org")
        org-ref-default-bibliography `(,(concat org-directory "bibliography/references.bib"))
        org-ref-pdf-directory (concat org-directory "bibliography/bibtex-pdfs/"))

  (unless (file-exists-p org-ref-pdf-directory)
    (make-directory org-ref-pdf-directory t))

  (setq org-src-fontify-natively t
        org-confirm-babel-evaluate nil
        org-src-preserve-indentation t)

  (org-babel-do-load-languages
   'org-babel-load-languages '((python . t)))

  (setq org-latex-pdf-process
        '("pdflatex -interaction nonstopmode --output-directory %o %f"
          "bibtex %b"
          "pdflatex -interaction nonstopmode --output-directory %o %f"
          "pdflatex -interaction nonstopmode --output-directory %o %f"))


  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5)

  (setq org-latex-default-packages-alist
        (-remove-item
         '("" "hyperref" nil)
         org-latex-default-packages-alist))

  ;; Append new packages
  (add-to-list 'org-latex-default-packages-alist '("" "natbib" "") t)
  (add-to-list 'org-latex-default-packages-alist
               '("linktocpage,pdfstartview=FitH,colorlinks,linkcolor=blue,anchorcolor=blue,citecolo=blue,filecolor=blue,menucolor=blue,urlcolor=blue"
                 "hyperref" nil)
               t)

#+END_SRC
* Org-mode Capture
#+BEGIN_SRC emacs-lisp
  (defun org-capture-event ()
    "Capture an event template for org-capture"
    (cl-labels ((update (date days)
                        (format-time-string
                         (car org-time-stamp-formats)
                         (seconds-to-time (+ (time-to-seconds date)
                                             (* days 86400))))))
      (let ((title   (read-string "Title: " nil nil '(nil)))
            (speaker (read-string "Speaker: " nil nil '(nil)))
            (date    (org-read-date nil t))
            (location (read-string "Location: " nil nil '(nil))))
        (when (and title speaker date location)
          (concat (format "* %s with %s\n"
                          title speaker)
                  (format "  %s\n" (update date 0))
                  (format "  Location: %s %%?\n" location))))))

  (defun org-capture-meeting ()
    "Capture an event template for org-capture"
    (cl-labels ((update (date days)
                        (format-time-string
                        (car org-time-stamp-formats)
                        (seconds-to-time (+ (time-to-seconds date)
                                            (* days 86400))))))
      (let ((with  (read-string "Meet with: " nil nil '(nil)))
            (date  (org-read-date nil t))
            (location (read-string "Location: " nil nil '(nil)))
            (about    (read-string "Regarding: " nil nil '(nil))))
        (when (and with date location about)
          (concat (format "* Meet with %s\n" with)
                  (format "  %s\n" (update date 0))
                  (format "  Regarding %s\n" about)
                  (format "  Location: %s %%?\n" location))))))

  (defun org-capture-note ()
    "Capture a note template for org-capture"
    (cl-labels ((update (date days)
                        (format-time-string
                         (car org-time-stamp-formats)
                         (seconds-to-time (+ (time-to-seconds date)
                                             (* days 86400))))))
      (let ((note (read-string "Note: " nil nil '(nil)))
            (date (org-read-date nil t)))
        (when (and note date)
          (concat (format "* %s\n" note)
                  (format "  Noted: %s" date))))))

  (defun org-capture-phone ()
      "Capture a phone call template for org-capture"
      (let ((contact (read-string "Contact: " nil nil '(nil)))
            (subject (read-string "Subject: " nil nil '(nil)))
            (date    (org-read-date nil t)))
        (when (and contact subject date)
          (concat (format "* TODO Call %s about %s\n"
                          contact subject)
                  (format "  Noted: %s" date)))))

  (defun org-capture-grocery ()
      "Capture a grocery template for org-capture"
    (cl-labels ((update (date days)
                        (format-time-string
                         (car org-time-stamp-formats)
                         (seconds-to-time (+ (time-to-seconds date)
                                             (* days 86400))))))
      (let ((item (read-string "Item: " nil nil '(nil))))
        (when item
          (format "* %s\n" item)))))

  (defun org-capture-recipe ()
      "Capture a recipe template for org-capture"
    (cl-labels ((update (date days)
                        (format-time-string
                         (car org-time-stamp-formats)
                         (seconds-to-time (+ (time-to-seconds date)
                                             (* days 86400))))))
      (let ((title (read-string "Name of Recipe: " nil nil '(nil)))
            (url   (read-string "url: " nil nil '(nil))))
        (when (and title url)
          (concat (format "* [[%s]" url)
                  (format "[%s]]\n" title))))))

#+END_SRC

#+RESULTS:
: org-capture-phone

* Key Bindings
#+BEGIN_SRC emacs-lisp
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-cb" 'org-iswitchb)
  (define-key global-map "\C-ca" 'org-agenda)
  (define-key global-map "\C-ct" 'org-set-tags)

  (global-set-key "\M-\\" "â—Š")

  (defun org-mode-set-up-key-bindings ()
    (define-key org-mode-map (kbd "C-t") 'org-time-stamp)
    ;; If ncecessary, add more calls to 'define-key here ...
    )


  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "M-o") 'other-window)
  (define-key global-map (kbd "RET") 'newline-and-indent)
#+END_SRC
* Flymake Settings
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
               :defer 2
               :diminish
               :init (global-flycheck-mode)
               :custom
               (flycheck-display-errors-delay .3)
               (flycheck-stylelintrc "~/.stylelintrc.json"))

  (setq flycheck-list
        '(flycheck-clojure
          flycheck-ghcmod
          flycheck-haskell
          flycheck-kotlin
          flycheck-pyflakes
          flycheck-rust
          flycheck-yamllint
          flymake-haskel
          flymake-json
          flymake-python-pyflakes
          flycheck-rust
          flycheck-yaml))

#+END_SRC
* Mode Hooks
** org-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-mode-set-up-key-bindings)
  (add-hook 'org-mode-hook #'(lambda ()
                               (visual-line-mode)
                               (org-indent-mode)
                               (flyspell-mode)))
#+END_SRC
** latex-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'latex-mode-hook #'(lambda ()
                                 (visual-line-mode)
                                 (flyspell-mode)))
#+END_SRC
** prog-mode
#+BEGIN_SRC emacs-lisp
  (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
#+END_SRC
** prolog-mode
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.\\(pl\\|pro\\|lgt\\)" . prolog-mode))
#+END_SRC
** python-mode
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'python-mode
    (add-hook 'flycheck-mode-hook #'flycheck-python-setup))
#+END_SRC
** rust-mode
#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'rust-mode
    (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
#+END_SRC
** server-switch
#+BEGIN_SRC emacs-lisp
  (add-hook 'server-switch-hook
            (lambda ()
              (when (current-local-map)
                (use-local-map (copy-keymap (current-local-map))))
              (when server-buffer-clients
                (local-set-key (kbd "C-x k") 'server-edit))))
#+END_SRC
* Set Variables
#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   ;; custom-set-variables was added by Custom.
   ;; If you edit it by hand, you could mess it up, so be careful.
   ;; Your init file should contain only one such instance.
   ;; If there is more than one, they won't work right.
   '(ansi-color-names-vector
     ["#282c34" "#ff6c6b" "#98be65" "#da8548" "#61afef" "#c678dd" "#1f5582" "#abb2bf"])
   '(custom-safe-themes
     (quote
      ("bce3ae31774e626dce97ed6d7781b4c147c990e48a35baedf67e185ebc544a56" "dcb9fd142d390bb289fee1d1bb49cb67ab7422cd46baddf11f5c9b7ff756f64c" "ff7625ad8aa2615eae96d6b4469fcc7d3d20b2e1ebc63b761a349bebbb9d23cb" "5b6b9c2f0121417faa3f69924b2643656cd429044f956bfa5328000b21d78dc9" default)))
   
   '(inhibit-startup-screen t)
   '(initial-buffer-choice (concat org-directory "Home.org"))
   '(org-agenda-files nil)
   '(package-selected-packages
     (quote
      (pomidor org-bullets challenger-deep-theme dracula-theme adaptive-wrap markdown-mode markdown-mode+ markdown-preview-eww markdown-preview-mode auto-complete-auctex slime psgml ensime sbt-mode auctex flyspell-popup lua-mode scala-mode which-key s-buffer zerodark-theme org-plus-contrib org better-defaults)))
   )


  (setq ido-enable-flex-matching t)
  (setq ido-everywhere t)

  (setq apropos-sort-by-scores t)
  (fset 'yes-or-no-p 'y-or-n-p)
  (setq ring-bell-function
        (lambda ()
          (let ((orig-fg (face-foreground 'mode-line)))
            (set-face-foreground 'mode-line "#F2804F")
            (run-with-idle-timer 0.1 nil
                                 (lambda (fg) (set-face-foreground 'mode-line fg))
                                 orig-fg))))

  (setenv "GIT_ASKPASS" "git-gui--askpass")

  (setq pomidor-seconds (* 25 60))
  (setq pomidor-break-seconds (* 5 60))
  (setq pomidor-sound-tick nil)
  (setq pomidor-sound-tack nil)
  (setq-default ispell-program-name "aspell")
#+END_SRC
* Set Modes
#+BEGIN_SRC emacs-lisp
  (global-linum-mode t)
  (ido-mode t)
  (which-key-mode)
  (which-key-setup-side-window-bottom)
  (global-hl-line-mode)
  (global-linum-mode)
  (scroll-bar-mode -1)
  (show-paren-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC
* Set Themes
#+BEGIN_SRC emacs-lisp
  (setq theme-list
       '(ample-theme
         anti-zenburn-theme
         base16-theme
         challenger-deep-theme
         faff-theme
         leuven-theme
         plan9-theme
         solarized-theme
         twilight-bright-theme
         zenburn-theme
         zerodark-theme))

  (mapc #'(lambda (theme)
            (unless (package-installed-p theme)
              (package-install theme)))
        theme-list)

  (add-hook 'after-init-hook (lambda ()
                               (zerodark-setup-modeline-format)
                               ;; (load-theme 'org-beautify t)
                               (load-theme 'zerodark t)))

  (defun disable-all-themes ()
    "Disable themes before initializing a new one"
    (interactive)
    (disable-theme 'ample-light)
    (disable-theme 'anti-zenburn)
    (disable-theme 'base16-dracula)
    (disable-theme 'challenger-deep)
    (disable-theme 'faff)
    (disable-theme 'leuven)
    (disable-theme 'plan9)
    (disable-theme 'solarized-dark)
    (disable-theme 'solarized-light)  
    (disable-theme 'twilight-bright)
    (disable-theme 'zerodark))

  (defun load-key-theme (key-theme)
    "Load the given key-theme"
    (disable-all-themes)
    (load-theme key-theme t))

  ;; Light Themes

  (define-prefix-command 'load-light-theme)
  (global-set-key (kbd "C-c l") load-light-theme) ;; Light theme prefix

  (define-key load-light-theme (kbd "l")
    '(lambda ()
       (interactive)
       (load-key-theme 'leuven)))
  (which-key-add-key-based-replacements "C-c l l" "leuven")

  (define-key load-light-theme (kbd "p")
    '(lambda ()
       (interactive)
       (load-key-theme 'plan9)))
  (which-key-add-key-based-replacements "C-c l p" "plan9")

  (define-key load-light-theme (kbd "s")
    '(lambda ()
       (interactive)
       (load-key-theme 'solarized-light)))
  (which-key-add-key-based-replacements "C-c l s" "solarized-light")

  (define-key load-light-theme (kbd "t")
    '(lambda ()
       (interactive)
       (load-key-theme 'twilight-bright)))
  (which-key-add-key-based-replacements "C-c l t" "twilight-bright")

  ;; Medium Themes

  (define-prefix-command 'load-medium-theme)
  (global-set-key (kbd "C-c m") 'load-medium-theme) ;; Medium theme prefix

  (define-key load-medium-theme (kbd "a")
    '(lambda ()
       (interactive)
       (load-key-theme 'ample-light)))
  (which-key-add-key-based-replacements "C-c m a" "ample-light")

  (define-key load-medium-theme (kbd "f")
    '(lambda ()
       (interactive)
       (load-key-theme 'faff)))
  (which-key-add-key-based-replacements "C-c m f" "faff")

  (define-key load-medium-theme (kbd "n")
    '(lambda ()
       (interactive)
       (load-key-theme 'anti-zenburn)))
  (which-key-add-key-based-replacements "C-c m n" "anti-zenburn")

  (define-key load-medium-theme (kbd "z")
    '(lambda ()
       (interactive)
       (load-key-theme 'zenburn)))
  (which-key-add-key-based-replacements "C-c m z" "zenburn")

  ;; Dark Themes

  (define-prefix-command 'load-dark-theme)
  (global-set-key (kbd "C-c d") 'load-dark-theme) ;; Dark theme prefix

  (define-key load-dark-theme (kbd "c")
    '(lambda ()
       (interactive)
       (load-key-theme 'challenger-deep)))
  (which-key-add-key-based-replacements "C-c d c" "challenger-deep")

  (define-key load-dark-theme (kbd "d")
    '(lambda ()
       (interactive)
       (load-key-theme 'base16-dracula)))
  (which-key-add-key-based-replacements "C-c d d" "base16-dracula")

  (define-key load-dark-theme (kbd "s")
    '(lambda ()
       (interactive)
       (load-key-theme 'solarized-dark)))
  (which-key-add-key-based-replacements "C-c d s" "solarized-dark")

  (define-key load-dark-theme (kbd "z")
    '(lambda ()
       (interactive)
       (load-key-theme 'zerodark)))
  (which-key-add-key-based-replacements "C-c d z" "zerodark")

#+END_SRC
* Set Fonts
#+BEGIN_SRC emacs-lisp
  (define-prefix-command 'switch-font)
  (global-set-key (kbd "C-c f") 'switch-font)

  (define-key switch-font "a"
    '(lambda () (interactive) (set-frame-font "Anonymous Pro 12")))
  (which-key-add-key-based-replacements "C-c f a" "Anonymous Pro")

  (define-key switch-font "c"
    '(lambda () (interactive) (set-frame-font "Charter 12")))
  (which-key-add-key-based-replacements "C-c f c" "Charter")

  (define-key switch-font "f"
    '(lambda () (interactive) (set-frame-font "Fira Sans 12")))
  (which-key-add-key-based-replacements "C-c f f" "Fira Sans")

  (define-key switch-font "h"
    '(lambda () (interactive (set-frame-font "Hack 12"))))
  (which-key-add-key-based-replacements "C-c f h" "Hack")

  (define-key switch-font "i"
    '(lambda () (interactive) (set-frame-font "Inconsolata 12")))
  (which-key-add-key-based-replacements "C-c f i" "Inconsolata")

  (define-key switch-font "p"
    '(lambda () (interactive) (set-frame-font "Space Mono 12")))
  (which-key-add-key-based-replacements "C-c f p" "Space Mono")

  (define-key switch-font "r"
    '(lambda () (interactive) (set-frame-font "Fira Code 12")))
  (which-key-add-key-based-replacements "C-c f r" "Fira Code")

  (define-key switch-font "s"
    '(lambda () (interactive) (if (null (x-list-fonts "Source Code Variable"))
                                  (set-frame-font "Source Code Pro 12")
                                  (set-frame-font "Source Code Variable 12"))))
  (which-key-add-key-based-replacements "C-c f s" "Source Code Pro")

  (define-key switch-font "t"
    '(lambda () (interactive) (set-frame-font "Triplicate T4c 12")))
  (which-key-add-key-based-replacements "C-c f t" "Triplicate")

  #+END_SRC
* Start Server
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
